@Library('cluster-logging-library') _
properties([
    parameters([
        [$class: 'ChoiceParameter', 
            choiceType: 'PT_SINGLE_SELECT', 
            description: 'Select the Logging version from the Dropdown List', 
            filterLength: 1, 
            filterable: false, 
            name: 'LoggingVersion', 
            script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return[\'Could not get The Logging version\']'
                ], 
                script: [
                    classpath: [], 
                    sandbox: false, 
                    script: 
                        'return["Cluster_Logging_5.2:selected","Cluster_Logging_5.3","Cluster_Logging_5.4","Cluster_Logging_5.5","Cluster_Logging_5.6"]'
                ]
            ]
        ],
        [$class: 'CascadeChoiceParameter', 
            choiceType: 'PT_MULTI_SELECT', 
            description: 'Select the Cluster Versions from the Dropdown List',
            name: 'OCPVersion', 
            referencedParameters: 'LoggingVersion', 
            script: 
                [$class: 'GroovyScript', 
                fallbackScript: [
                        classpath: [], 
                        sandbox: false, 
                        script: 'return[\'Could not get Cluster Logging version from LoggingVersion Param\']'
                        ], 
                script: [
                        classpath: [], 
                        sandbox: false, 
                        script: '''
                        if (LoggingVersion.equals("Cluster_Logging_5.2")){
                            return["OCP_4.8", "OCP_4.9", "OCP_4.10", "OCP_4.11"]
                        }
                        else if(LoggingVersion.equals("Cluster_Logging_5.3")){
                            return["OCP_4.8", "OCP_4.9", "OCP_4.10", "OCP_4.11"]
                        }
                        else if(LoggingVersion.equals("Cluster_Logging_5.4")){
                            return["OCP_4.8", "OCP_4.9", "OCP_4.10", "OCP_4.11"]
                        }
                        else if(LoggingVersion.equals("Cluster_Logging_5.5")){
                            return["OCP_4.8", "OCP_4.9", "OCP_4.10", "OCP_4.11"]
                        }
                        else if(LoggingVersion.equals("Cluster_Logging_5.6")){
                            return["OCP_4.8", "OCP_4.9", "OCP_4.10", "OCP_4.11"]
                        }
                        '''
                    ] 
            ]
        ]
            
        ])
    ])

pipeline {
    agent {
        docker {
            image 'quay.io/powercloud/inbound-agent:4.6-1.3'
            args '-v /etc/resolv.conf:/etc/resolv.conf'
            label 'jump-vpc-x86_64'
        }
    }

    parameters {
        string(defaultValue: '', description: 'IP(Input the IP of cluster)', name: 'OCP_IP')
    }

    environment {
        OCP_Cluster_IP = "${params.OCP_IP}"
        LoggingVersion = "${params.LoggingVersion}"
        
    }
        stages {
            
            stage('Clone ansible extra'){
                steps {
                    cloneRepo("git@github.ibm.com:redstack-power/ocp4_ansible_extras.git", "ansible_extra")
                
                }
            }

            stage('Check cluster connection')
                script {
                    ansiColor('xterm') {
                        echo ""
                    }
                    try
                    {
                        clusterLoggingGetKey()
                        
                        sh '''
                            echo "${OCP_Cluster_IP}"
                            echo "${LoggingVersion}"
                            ssh -o 'StrictHostKeyChecking no' -i ${WORKSPACE}/deploy/id_rsa root@9.114.97.53
                        '''
                ssh -o 'StrictHostKeyChecking no' -i ${WORKSPACE}/deploy/id_rsa root@${BASTION_IP}
                    
            }
        }
}   
}
