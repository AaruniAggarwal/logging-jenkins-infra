pipeline {
    agent {
        docker {
            image 'quay.io/powercloud/inbound-agent:4.6-1.3'
            args '-v /etc/resolv.conf:/etc/resolv.conf'
            label 'jump-vpc-x86_64'
        }
    }
        stages {
            stage('Parameters'){
                steps {
                    script {
                    properties([
                            parameters([
                                [$class: 'ChoiceParameter', 
                                    choiceType: 'PT_SINGLE_SELECT', 
                                    description: 'Select the Logging version from the Dropdown List', 
                                    filterLength: 1, 
                                    filterable: false, 
                                    name: 'LoggingVersion', 
                                    script: [
                                        $class: 'GroovyScript', 
                                        fallbackScript: [
                                            classpath: [], 
                                            sandbox: false, 
                                            script: 
                                                "return['Could not get The Logging version']"
                                        ], 
                                        script: [
                                            classpath: [], 
                                            sandbox: false, 
                                            script: 
                                                "return['Cluster_Logging_5.2','Cluster Logging 5.3','Cluster Logging 5.4','Cluster Logging 5.5','Cluster Logging 5.6']"
                                        ]
                                    ]
                                ],
                                [$class: 'CascadeChoiceParameter', 
                                    choiceType: 'PT_CHECKBOX', 
                                    description: 'Select the Cluster Versions from the Dropdown List',
                                    name: 'OCPVersion', 
                                    referencedParameters: 'LoggingVersion', 
                                    script: 
                                        [$class: 'GroovyScript', 
                                        fallbackScript: [
                                                classpath: [], 
                                                sandbox: false, 
                                                script: "return['Could not get Cluster Logging version from LoggingVersion Param']"
                                                ], 
                                        script: [
                                                classpath: [], 
                                                sandbox: false, 
                                                script: '''
                                                if (Env.equals("Cluster_Logging_5.2")){
                                                    return["OCP_4.8", "OCP_4.9", "OCP_4.10", "OCP_4.11"]
                                                }
                                                else if(Env.equals("Cluster_Logging_5.3")){
                                                    return["OCP_4.8", "OCP_4.9", "OCP_4.10", "OCP_4.11"]
                                                }
                                                else if(Env.equals("Cluster_Logging_5.4")){
                                                    return["OCP_4.8", "OCP_4.9", "OCP_4.10", "OCP_4.11"]
                                                }
                                                else if(Env.equals("Cluster_Logging_5.5")){
                                                    return["OCP_4.8", "OCP_4.9", "OCP_4.10", "OCP_4.11"]
                                                }
                                                else if(Env.equals("Cluster_Logging_5.6")){
                                                    return["OCP_4.8", "OCP_4.9", "OCP_4.10", "OCP_4.11"]
                                                }
                                                '''
                                            ] 
                                    ]
                                ],
                                [$class: 'DynamicReferenceParameter', 
                                    choiceType: 'ET_ORDERED_LIST', 
                                    description: 'Select the  AMI based on the following infomration', 
                                    name: 'Image Information', 
                                    referencedParameters: 'Env', 
                                    script: 
                                        [$class: 'GroovyScript', 
                                        script: 'return["Could not get AMi Information"]', 
                                        script: [
                                            script: '''
                                                    if (Env.equals("dev")){
                                                        return["ami-sd2345sd:  AMI with Java", "ami-asdf245sdf: AMI with Python", "ami-asdf3245sd: AMI with Groovy"]
                                                    }
                                                    else if(Env.equals("stage")){
                                                        return["ami-sd34sdf:  AMI with Java", "ami-sdf345sdc: AMI with Python", "ami-sdf34sdf: AMI with Groovy"]
                                                    }
                                                    else if(Env.equals("prod")){
                                                        return["ami-sdf34sdf:  AMI with Java", "ami-sdf34ds: AMI with Python", "ami-sdf3sf3: AMI with Groovy"]
                                                    }
                                                    '''
                                                ]
                                        ]
                                ]
                            ])
                        ])
                    }
                }
            }
        }   
}