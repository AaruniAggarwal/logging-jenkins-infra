@Library('cluster-logging-library') _



pipeline {
    agent {
        docker {
            image 'quay.io/powercloud/inbound-agent:4.6-1.3'
            args '-v /etc/resolv.conf:/etc/resolv.conf'
            label 'jump-vpc-x86_64'
        }
    }

    parameters {
        string(defaultValue: '', description: 'IP(Input the IP of cluster)', name: 'OCP_IP')
        string(defaultValue: '', description: 'Elasticsearch Index Info', name: 'Elasticsearch_index')
        string(defaultValue: '', description: 'Cluster Logging Index Info', name: 'ClusterLogging_index')
        string(defaultValue: '', description: 'Loki Operator Index Info', name: 'LokiOperator_index')
        choice(choices: ['fluentd', 'vector'], description: 'Select the Cluster Logging forwarder type', name: 'LogCollectorType')

    }

    environment {
        //parameters
        OCP_IP = "${params.OCP_IP}"

        //Cluster Logging
        //LOGGINGVERSION = "${params.LoggingVersion}"
        LOGGINGVERSION = "5.3"
        ELASTICSEARCH_INDEX = "${params.Elasticsearch_index}"
        CLUSTERLOGGING_INDEX = "${params.ClusterLogging_index}"
        LOKIOPERATOR_INDEX = "${params.LokiOperator_index}"
        LOGCOLLECTORTYPE = "${params.LogCollectorType}"
        OCPVERSION= "OCP_4.8"
        //OCPVERSION = "${params.OCPVersion}"
        CLFCLEANUP = "false"
        GITHUBTOKEN = credentials('SATWIN_GITHUB_TOKEN')
    }
        stages {
            stage('Clean Up'){
                steps {
                    echo "Logging Version ${LOGGINGVERSION}"
                    echo "deploying version ${params.LoggingVersion}"
                    clusterLoggingGetKey()
                    clusterLoggingInventory()
                    clusterLoggingVars()
                    clusterLoggingExportVars()
                }
            }

            stage('Cluster Logging Deployment'){
                steps {
                    clusterLoggingGetKey()
                    clusterLoggingInventory()
                    clusterLoggingVars()
                    script {
                        CLFCLEANUP = "true"
                    }
                    clusterLoggingExportVars()
                }
            }
        }   
}
